"use strict";var dependencies;dependencies=["LocalStorageModule"],angular.module("cron.ng",dependencies),angular.module("cron.ng").factory("CronJob",["localStorageService","CronJobRunner",function(a,b){var c;return c=function(){function c(){}return c.prototype.validate=function(){if(!this.name)throw"Job must have a name";if(!this.priority)throw"Job must have an integer priority";if(!_.isFunction(this.run))throw"You must use 'run' to specify what to do";if(this.stop&&!_.isFunction(this.stop))throw"You must provide a function to 'stop'";if(!moment.isDuration(this.interval))throw"Interval must be a moment duration";if(this.timeout&&!moment.isDuration(this.timeout))throw"Timeout must be a moment duration";if(this.randomOffset&&!moment.isDuration(this.randomOffset))throw"Random offset must be a duration"},c.prototype.getNextInterval=function(){return null!=this.randomOffset?this.interval.asMilliseconds()+Math.ceil(Math.random()*this.randomOffset.asMilliseconds()):this.interval.asMilliseconds()},c.prototype.initialize=function(){return this.nextRun=moment(a.get("cron.job.nextRun."+this.name)||new Date),this},c.prototype.isOverdue=function(){return moment().isAfter(this.nextRun)||moment().isSame(this.nextRun)},c.prototype.getTimeout=function(){return this.timeout||this._intervalOr30Seconds()},c.prototype._intervalOr30Seconds=function(){return _.min([this.interval,moment.duration({seconds:30})],function(a){return a.asMilliseconds()})},c.prototype.saveNextRun=function(){return this.nextRun=moment().add(this.getNextInterval()),a.set("cron.job.nextRun."+this.name,this.nextRun.toISOString()),this},c.prototype.cancel=function(){return null!=this.runner&&this.runner.stop(),this.runner=null,null!=this.stop?this.stop():void 0},c.prototype.execute=function(){return this._endPreviousRunner(),this.saveNextRun(),this.runner=new b(this),this.runner.run()},c.prototype._endPreviousRunner=function(){return this.runner&&this.runner.running?(console.debug("Runner for job "+job.name+" is still running."),this.runner.stop()):void 0},c}()}]);var __slice=[].slice;angular.module("cron.ng").factory("CronJobRunner",["$q","$timeout",function(a,b){var c;return c=function(){function c(a){this.job=a,this.running=!0}return c.prototype.run=function(){var b;return console.debug("Running job "+this.job.name),this.promise=a.defer(),b=this._run(),this._scheduleTimeout(),b.then(function(a){return function(){var b,c;return b=1<=arguments.length?__slice.call(arguments,0):[],(c=a.promise).resolve.apply(c,b)}}(this))["catch"](function(a){return function(){var b,c;return b=1<=arguments.length?__slice.call(arguments,0):[],(c=a.promise).reject.apply(c,b)}}(this))["finally"](function(a){return function(){a._cancelTimeout()}}(this)),this.promise.promise["finally"](function(a){return function(){return a.running=!1}}(this))},c.prototype.stop=function(){return console.debug("Stopping job "+this.job.name),this._cancelTimeout(),this.promise.resolve("Stopped")},c.prototype._run=function(){var b;return b=this.job.run(),b&&_.isFunction(b["finally"])?b:a.when(b)},c.prototype._timeout=function(){return console.debug("Timed out job "+this.job.name),this.promise.reject("TimedOut")},c.prototype._scheduleTimeout=function(){return this.timeoutPromise=b(function(a){return function(){return a.timeoutPromise=b(_.bind(a._timeout,a),a.job.getTimeout().asMilliseconds())}}(this),0)},c.prototype._cancelTimeout=function(){return this.timeoutPromise&&b.cancel(this.timeoutPromise),this.timeoutPromise=null},c}()}]);var __slice=[].slice;angular.module("cron.ng").service("CronScheduler",["CronJob","$timeout","$rootScope","$q",function(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;o=[],k=[],l=null,p=4,n=function(b){var c;return c=new a,_.defaults(c,b),c.initialize(),c},m=function(a){return function(){return g(a),k=_(k).without(a),j()}},g=function(a){return c.$broadcast("cron.ng.job."+a.name+".finish")},h=function(a){return c.$broadcast("cron.ng.job."+a.name+".start")},r=function(a,b,c){return a.$on("cron.ng.job."+b.name+".success",c)},q=function(a,b,c){return a.$on("cron.ng.job."+b.name+".failure",c)},e=function(a){return function(){var b;return b=1<=arguments.length?__slice.call(arguments,0):[],console.debug("Job "+a.name+" finished successfully."),c.$broadcast.apply(c,["cron.ng.job."+a.name+".success"].concat(__slice.call(b)))}},f=function(a){return function(){var b;return b=1<=arguments.length?__slice.call(arguments,0):[],console.debug("Job "+a.name+" failed."),c.$broadcast.apply(c,["cron.ng.job."+a.name+".failure"].concat(__slice.call(b)))}},j=function(){var a,b;if(l)for(b=_(o).filter(function(a){return a.isOverdue()}),console.debug(""+b.length+" jobs are ready");k.length<p&&b.length>0;)a=b.shift(),k.push(a),h(a),a.execute().then(e(a),f(a))["finally"](m(a))},s=function(){return o=_(o).sortBy("priority")},i=function(){return console.debug("Execute Jobs called"),l=b(i,100),j()},t=function(){return _(k).invoke("cancel")},this.addJob=function(a){var b;if(l)throw"The cron scheduler is running.  Stop it before adding jobs.";return b=n(a),b.validate(),o.push(b)},this.whenCompleted=function(a){var b,e,f;if(e=_(o).findWhere({name:a}),!e)throw"Job "+a+" is not a known job";return b=c.$new(!0),f=d.defer(),r(b,e,function(){var a,b;return b=arguments[0],a=2<=arguments.length?__slice.call(arguments,1):[],f.resolve.apply(f,a)}),q(b,e,function(){var a,b;return b=arguments[0],a=2<=arguments.length?__slice.call(arguments,1):[],f.reject.apply(f,a)}),f.promise["finally"](function(){return b.$destroy()}),f.promise},this.start=function(){return s(),console.debug("Cron-ng started"),i()},this.stop=function(){return console.debug("Cron-ng stopping."),t(),l&&b.cancel(l),l=null,c.$digest(),console.debug("Cron-ng stopped.")}}]);